import Head from 'next/head'
import Image from 'next/image'
import React from 'react'
import styles from '../styles/Home.module.css'
import { toast } from 'react-toastify'
import cookieCutter from 'cookie-cutter'

const notify = (txt) => toast(txt)

/** @typedef {import('./type/userInfo').UserInfo} UserInfo */
/** @type {UserInfo} */
let user

/**
 * @type {{ [key:string]: React.CSSProperties }}
 */
const jsxStyles = {
  mainDiv: {
    border: 'solid',
    borderColor: 'green',
    backgroundColor: 'grey',
    borderRadius: '2rem',
    display: 'flex',
    flexDirection: 'column',
    minHeight: '60vh',
    minWidth: '40vw',
    alignItems: 'center',
    justifyContent: 'space-evenly'
  },
  pictureNameTopRow: {
    fontSize: '5vh',
    display: 'flex',
    flexDirection: 'row',
    alignItems: 'center',
  },
  profilePicture: {
    borderRadius: '100vh',
    width: '20vh',
    marginRight: '15px',
    position: 'static',
    left: '30%',
  },
  biography: {
    border: 'solid',
    borderColor: 'white',
    backgroundColor: '#ffffff90',
    borderRadius: '2vmin',
    padding: '10px',
    inlineSize: '30vw',
    overflow: 'hidden',
  },
  base: {
    borderRadius:'2vh',
    borderWidth:'0.1vh',
    textAlign:'center',
    paddingInline: '1vmax'
  },
  input: {
    paddingInline: '1vh'
  },
  button: {
    color:'#cacaca',
    padding: '10%'
  }
}

/**
 * @param {UserInfo['gender']} gender
 */
const defaultGender = (gender) => {
  switch (gender) {
    case 'male':
      return 'Homme'
    case 'female':
      return 'Femme'
    case 'other':
      return 'Other'
    default:
      return 'Homme'
  }
}


const pushUpdate = async (event) => {
  event.preventDefault()
  const { bio, gender } = event.target
  // notify(bio.value)
  // notify(gender.value)
  const data = new FormData()
  if (user.short_bio !== bio.value)
    data.append("short_bio", bio.value)
  const result = await pushRequest('user/', 'PUT', data)
  console.log(result)
}

const getUserInfo = async () => {
  try {
    const res = await fetch('http://127.0.0.1:5000/user/', {
      method: 'GET',
      // credentials: 'same-origin',
      credentials: 'include',
      mode: 'cors'
      // mode: 'same-origin'
    })
    if (res.status === 200) {
      const body = await res.json()
      console.log(body)
      user = body
      localStorage.removeItem("userInfo")
      localStorage.getItem("userInfo")
    }

  } catch (e) {
    console.error('getUserInfo:')
    console.error(e)
  }
}

// var formdata = new FormData();
// formdata.append("gender", "female");
// formdata.append("age", "33");
// formdata.append("search_female", "1");
// formdata.append("search_other", "1");
// formdata.append("short_bio", "just setting up my twtr account");
// formdata.append("search_male", "0");

/**
 * @param {string} url
 * @param {'GET' | 'POST' | 'PUT' | 'DELETE'} method
 */
const pushRequest = async (url, method, data) => {
  try {
    /** @type {RequestInit} */
    const requestOptions = {
      method: method ??= 'GET',
      credentials: 'include',
      mode: 'cors',
      body: data ??= {}
    }
    const res = await fetch('http://127.0.0.1:5000/' + url, requestOptions)
    if (res.status === 200) {
      const body = await res.json()
      console.log('response body', body)

    }
  } catch (e) {
    console.error('updateUserInfo:')
    console.error(e)
  }
}


export default function UpdateProfile() {
  /** @type {import('./type/userInfo').UserInfo} */
  let updated
  if (typeof window === "undefined") {
    //bypass ssr
    return null
  } else {
    user = JSON.parse(localStorage.getItem("userInfo"))
    if (!user){
      window.location.href = '/login'
      return null
    } else {
      if (!user.picture) {
        getUserInfo()
      }
      console.log("localStorage.userInfo:", user)
      updated = {...user}
      return (
        <div className={styles.container}>
          <Head>
            <title>Pokélove</title>
            <meta name="description" content="Generated by a lot of redbull" />
            <link rel="icon" href="/logo.png" />
          </Head>
          <form className={styles.main}
            onSubmit={pushUpdate}
          >
            <div style={jsxStyles.mainDiv}>
              <button type='button' id='sperm' onClick={getUserInfo}>request User</button>
              <div style={jsxStyles.pictureNameTopRow}>
                <img src='carapuce.jpeg' style={jsxStyles.profilePicture}/>
                {user.username}
              </div>
              popularité
              <textarea id='bio' maxLength={280} rows={6} style={{resize: 'none', ...jsxStyles.biography, ...((!user.short_bio) ? {color: 'grey'} : {color: 'inherit'})}}
                defaultValue={user.short_bio || 'écrire une description ...'}
                onBlur={(event) => {
                  if (event.target.value.length === 0)
                    event.target.value = user.short_bio || 'écrire une description ...'
                }}
              />
              Je suis:
              <select id='gender' defaultValue={defaultGender(user.gender)}>
                <option value='male'>Homme</option>
                <option value='female'>Femme</option>
                <option value='other'>Other</option>
              </select>
              <div>
                tag
              </div>
              <button
                id='magicButton'
                type='submit'
                className={styles.button}
                style={{
                  borderRadius:'2vh',
                  borderWidth:'0.1vh',
                  textAlign:'center',
                  paddingInline: '1vmax',
                  padding: '2vmin',
                }}
              >Sauvgarder</button>
            </div>
          </form>
        </div>
      )
    }
  }
}
